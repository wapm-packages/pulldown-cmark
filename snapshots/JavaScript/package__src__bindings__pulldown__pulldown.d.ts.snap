---
source: /Users/xorcist/.cargo/registry/src/github.com-1ecc6299db9ec823/wasmer-pack-testing-0.6.0/src/autodiscover.rs
---
export type Result<T, E> = { tag: "ok", val: T } | { tag: "err", val: E };
export interface Error {
  message: string,
}
export type CowStr = string;
export type Options = number;
export const OPTIONS_ENABLE_TABLES = 1;
export const OPTIONS_ENABLE_FOOTNOTES = 2;
export const OPTIONS_ENABLE_STRIKETHROUGH = 4;
export const OPTIONS_ENABLE_TASKLISTS = 8;
export const OPTIONS_ENABLE_SMART_PUNCTUATION = 16;
export const OPTIONS_ENABLE_HEADING_ATTRIBUTES = 32;
export type Alignment = AlignmentNone | AlignmentLeft | AlignmentCenter | AlignmentRight;
export interface AlignmentNone {
  tag: "none",
}
export interface AlignmentLeft {
  tag: "left",
}
export interface AlignmentCenter {
  tag: "center",
}
export interface AlignmentRight {
  tag: "right",
}
export type CodeBlockKind = CodeBlockKindIndented | CodeBlockKindFenced;
export interface CodeBlockKindIndented {
  tag: "indented",
}
export interface CodeBlockKindFenced {
  tag: "fenced",
  val: CowStr,
}
export type LinkType = LinkTypeInline | LinkTypeReference | LinkTypeReferenceUnknown | LinkTypeCollapsed | LinkTypeCollapsedUnknown | LinkTypeShortcut | LinkTypeShortcutUnknown | LinkTypeAutolink | LinkTypeEmail;
export interface LinkTypeInline {
  tag: "inline",
}
export interface LinkTypeReference {
  tag: "reference",
}
export interface LinkTypeReferenceUnknown {
  tag: "reference-unknown",
}
export interface LinkTypeCollapsed {
  tag: "collapsed",
}
export interface LinkTypeCollapsedUnknown {
  tag: "collapsed-unknown",
}
export interface LinkTypeShortcut {
  tag: "shortcut",
}
export interface LinkTypeShortcutUnknown {
  tag: "shortcut-unknown",
}
export interface LinkTypeAutolink {
  tag: "autolink",
}
export interface LinkTypeEmail {
  tag: "email",
}
export type HeadingLevel = HeadingLevelH1 | HeadingLevelH2 | HeadingLevelH3 | HeadingLevelH4 | HeadingLevelH5 | HeadingLevelH6;
export interface HeadingLevelH1 {
  tag: "h1",
}
export interface HeadingLevelH2 {
  tag: "h2",
}
export interface HeadingLevelH3 {
  tag: "h3",
}
export interface HeadingLevelH4 {
  tag: "h4",
}
export interface HeadingLevelH5 {
  tag: "h5",
}
export interface HeadingLevelH6 {
  tag: "h6",
}
export type Tag = TagParagraph | TagHeading | TagBlockQuote | TagCodeBlock | TagListTag | TagItem | TagFootnoteDefinition | TagTable | TagTableHead | TagTableRow | TagTableCell | TagEmphasis | TagStrong | TagStrikeThrough | TagLink | TagImage;
export interface TagParagraph {
  tag: "paragraph",
}
export interface TagHeading {
  tag: "heading",
  val: [HeadingLevel, string | null, string[]],
}
export interface TagBlockQuote {
  tag: "block-quote",
}
export interface TagCodeBlock {
  tag: "code-block",
  val: CodeBlockKind,
}
export interface TagListTag {
  tag: "list-tag",
  val: bigint | null,
}
export interface TagItem {
  tag: "item",
}
export interface TagFootnoteDefinition {
  tag: "footnote-definition",
  val: CowStr,
}
export interface TagTable {
  tag: "table",
  val: Alignment[],
}
export interface TagTableHead {
  tag: "table-head",
}
export interface TagTableRow {
  tag: "table-row",
}
export interface TagTableCell {
  tag: "table-cell",
}
export interface TagEmphasis {
  tag: "emphasis",
}
export interface TagStrong {
  tag: "strong",
}
export interface TagStrikeThrough {
  tag: "strike-through",
}
export interface TagLink {
  tag: "link",
  val: [LinkType, CowStr, CowStr],
}
export interface TagImage {
  tag: "image",
  val: [LinkType, CowStr, CowStr],
}
export type Event = EventStart | EventEnd | EventText | EventCode | EventHtml | EventFootnoteReference | EventSoftBreak | EventHardBreak | EventRule | EventTaskListMarker;
export interface EventStart {
  tag: "start",
  val: Tag,
}
export interface EventEnd {
  tag: "end",
  val: Tag,
}
export interface EventText {
  tag: "text",
  val: CowStr,
}
export interface EventCode {
  tag: "code",
  val: CowStr,
}
export interface EventHtml {
  tag: "html",
  val: CowStr,
}
export interface EventFootnoteReference {
  tag: "footnote-reference",
  val: CowStr,
}
export interface EventSoftBreak {
  tag: "soft-break",
}
export interface EventHardBreak {
  tag: "hard-break",
}
export interface EventRule {
  tag: "rule",
}
export interface EventTaskListMarker {
  tag: "task-list-marker",
  val: boolean,
}
export interface Range {
  start: number,
  end: number,
}
export interface BrokenLink {
  span: Range,
  linkType: LinkType,
  reference: CowStr,
}
export interface InvalidHeadingLevel {
  message: string,
}
export interface LinkDef {
  dest: CowStr,
  title?: CowStr,
  span: Range,
}
export type OffsetItem = [Event, Range];
export class Pulldown {
  
  /**
  * The WebAssembly instance that this class is operating with.
  * This is only available after the `instantiate` method has
  * been called.
  */
  instance: WebAssembly.Instance;
  
  /**
  * Constructs a new instance with internal state necessary to
  * manage a wasm instance.
  *
  * Note that this does not actually instantiate the WebAssembly
  * instance or module, you'll need to call the `instantiate`
  * method below to "activate" this class.
  */
  constructor();
  
  /**
  * This is a low-level method which can be used to add any
  * intrinsics necessary for this instance to operate to an
  * import object.
  *
  * The `import` object given here is expected to be used later
  * to actually instantiate the module this class corresponds to.
  * If the `instantiate` method below actually does the
  * instantiation then there's no need to call this method, but
  * if you're instantiating manually elsewhere then this can be
  * used to prepare the import object for external instantiation.
  */
  addToImports(imports: any): void;
  
  /**
  * Initializes this object with the provided WebAssembly
  * module/instance.
  *
  * This is intended to be a flexible method of instantiating
  * and completion of the initialization of this class. This
  * method must be called before interacting with the
  * WebAssembly object.
  *
  * The first argument to this method is where to get the
  * wasm from. This can be a whole bunch of different types,
  * for example:
  *
  * * A precompiled `WebAssembly.Module`
  * * A typed array buffer containing the wasm bytecode.
  * * A `Promise` of a `Response` which is used with
  *   `instantiateStreaming`
  * * A `Response` itself used with `instantiateStreaming`.
  * * An already instantiated `WebAssembly.Instance`
  *
  * If necessary the module is compiled, and if necessary the
  * module is instantiated. Whether or not it's necessary
  * depends on the type of argument provided to
  * instantiation.
  *
  * If instantiation is performed then the `imports` object
  * passed here is the list of imports used to instantiate
  * the instance. This method may add its own intrinsics to
  * this `imports` object too.
  */
  instantiate(
  module: WebAssembly.Module | BufferSource | Promise<Response> | Response | WebAssembly.Instance,
  imports?: any,
  ): Promise<void>;
  escapeHref(s: string): Result<string, Error>;
  escapeHtml(s: string): Result<string, Error>;
  markdownToHtml(markdownString: string): string;
  parse(markdown: string): OffsetItem[];
  parseWithOptions(markdown: string, options: Options): OffsetItem[];
}

